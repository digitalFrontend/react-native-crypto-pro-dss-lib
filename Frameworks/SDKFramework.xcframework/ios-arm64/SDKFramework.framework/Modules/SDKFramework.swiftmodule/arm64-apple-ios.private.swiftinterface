// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SDKFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreImage.CIFilterBuiltins
import Combine
import CommonCrypto
import CoreImage
import CoreNFC
import Darwin
import Dispatch
import Foundation
import LocalAuthentication
import PDFKit
import PhotosUI
@_exported import SDKFramework
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import os.log
import os
@frozen public enum SDKRutokenError : Swift.Error {
  case notStarted(code: Swift.Int32)
  case notStoped(code: Swift.Int32)
}
extension SDKFramework.SDKRutokenError {
  public static func hex(by code: Swift.Int32) -> Swift.String
}
extension SDKFramework.SDKRutokenError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKRutokenError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDKControlStyle {
  public var backgroundColor: SDKFramework.SDKControlColor
  public var cornerRadius: SDKFramework.SDKCornerRadius?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: SDKFramework.SDKControlColor?
  public var tintColor: SDKFramework.SDKControlColor?
  public var alpha: SDKFramework.SDKControlFloatValue
  @objc deinit
}
public struct DSSUser {
  public var kid: Swift.String
  public var uid: Swift.String
  public var alias: Swift.String?
  public var state: Swift.String
  public var profile: Swift.String
  public var notBefore: Swift.Int64
  public var notAfter: Swift.Int64
  public var serviceUrl: Swift.String
  public var name: Swift.String
  public var keyType: Swift.Bool
  public init()
  public init(kid: Swift.String, uid: Swift.String, alias: Swift.String?, state: Swift.String, profile: Swift.String, notBefore: Swift.Int64, notAfter: Swift.Int64, serviceUrl: Swift.String, name: Swift.String, keyType: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Cert_V2 {
  public static let shared: SDKFramework.Cert_V2
  @objc deinit
}
extension SDKFramework.Cert_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  public func createCert(kid: Swift.String, caId: Swift.Int, tId: Swift.String, dn: [Swift.String : Swift.String]) async throws -> SDKFramework.Certificate
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setCert(kid: Swift.String, crt: Swift.String) async throws -> SDKFramework.Certificate
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getCertList(kid: Swift.String) async throws -> [SDKFramework.Certificate]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setNameCert(kid: Swift.String, cid: Swift.String, friendlyName: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func suspendCert(kid: Swift.String, cid: Swift.String, holdDate: Swift.Int64, unholdDate: Swift.Int64) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func resumeCert(kid: Swift.String, cid: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func revokeCert(kid: Swift.String, cid: Swift.String, reason: SDKFramework.SDKCertRevokeReason, date: Swift.Int32) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setDefaultCert(kid: Swift.String, cid: Swift.String, isDefault: Swift.Bool) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func deleteCert(kid: Swift.String, cid: Swift.String, pinCode: Swift.String? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func deleteReqCert(kid: Swift.String, rid: Swift.String, pinCode: Swift.String? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func createUnsignedCert(kid: Swift.String, caId: Swift.Int, tId: Swift.String, dn: [Swift.String : Swift.String]) async throws -> SDKFramework.Certificate
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signRequest(kid: Swift.String, cert: SDKFramework.Certificate, providerInfo: SDKFramework.CryptoProviderInfo, cred: SDKFramework.CryptoProviderInfoCreds) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendClientSignedCertificate(kid: Swift.String, caId: Swift.Int, rid: Swift.String, content: Foundation.Data) async throws -> SDKFramework.Certificate
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func installCertificate(kid: Swift.String, cert: SDKFramework.Certificate, providerInfo: SDKFramework.CryptoProviderInfo, cred: SDKFramework.CryptoProviderInfoCreds) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func installCertificateExternal(kid: Swift.String, crt: SDKFramework.Certificate, keyInfo: SDKFramework.SigningKeyInfo) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func changeRutokenPin(kid: Swift.String, cid: Swift.String, rid: Swift.String) async throws
  #endif
  public func removeRutokenPin(kid: Swift.String, cid: Swift.String?, rid: Swift.String?) throws
}
extension SDKFramework.Cert_V2 {
  public func checkIfInstalled(kid: Swift.String, certificate: SDKFramework.Certificate) -> Swift.Bool
  public func checkIfAccessibleOnThisDevice(kid: Swift.String, cid: Swift.String?, rid: Swift.String?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKSetPukRutokenVC : SDKFramework.SDKSetPassRutokenVC {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SigningKey_V2 {
  public static let shared: SDKFramework.SigningKey_V2
  @objc deinit
}
extension SDKFramework.SigningKey_V2 {
  public func listKeys() -> [SDKFramework.SigningKeyInfo]
  #if compiler(>=5.3) && $AsyncAwait
  public func listExternalKeys() async throws -> [SDKFramework.SDKExternalKeyCertificateModel]
  #endif
  public func getKey(kid: Swift.String, rid: Swift.String?, cid: Swift.String?) -> SDKFramework.SigningKeyInfo?
  #if compiler(>=5.3) && $AsyncAwait
  public func deleteKeyPair(kid: Swift.String, providerInfo: SDKFramework.CryptoProviderInfo, pinCode: Swift.String?) async throws
  #endif
}
@_hasMissingDesignatedInitializers public class SDKTextFieldStyle {
  public var controlStyle: SDKFramework.SDKTextFieldFillStateValue<SDKFramework.SDKViewStyle>
  public var textFieldStyle: SDKFramework.SDKTextFieldFillStateValue<SDKFramework.SDKViewStyle>
  public var textColor: SDKFramework.SDKTextFieldFillStateValue<SDKFramework.SDKControlColor>
  public var descriptionColor: SDKFramework.SDKTextFieldFillStateValue<SDKFramework.SDKControlColor>
  public var placeholderColor: SDKFramework.SDKTextFieldFillStateValue<SDKFramework.SDKControlColor>
  @objc deinit
}
public struct SDKTextFieldFillStateValue<T> {
  public var empty: T
  public var emptyActive: T
  public var filled: T
  public var filledActive: T
  public init(empty: T, emptyActive: T, filled: T, filledActive: T)
  public init(all: T)
  public func get(by textField: UIKit.UITextField) -> T
}
extension Swift.Array where Element : Swift.Equatable {
  public mutating func removeFirst(_ element: Element)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKUserProfileVC : SDKFramework.SDKFixedVC {
  @_Concurrency.MainActor(unsafe) public init(canRefuse: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKControlsDemoVC : SDKFramework.SDKScrollVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKScrollVC : SDKFramework.SDKBaseVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
@frozen public enum CryptoKeyContainerType : Swift.String, Swift.Codable {
  case `default`
  case rutoken
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CryptoProviderInfoCreds : Swift.Codable {
  public var isSilent: Swift.Bool
  public var pin: Swift.String?
  public var puk: Swift.String?
  public init(pin: Swift.String?, puk: Swift.String? = nil, isSilent: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
}
extension Foundation.JSONDecoder.DateDecodingStrategy {
  public static let customDecoder: Foundation.JSONDecoder.DateDecodingStrategy
}
extension Foundation.JSONEncoder.DateEncodingStrategy {
  public static let customEncoder: Foundation.JSONEncoder.DateEncodingStrategy
}
public enum SDKCertRevokeReason : Swift.Int, Swift.Codable {
  case CRL_REASON_UNSPECIFIED
  case CRL_REASON_KEY_COMPROMISE
  case CRL_REASON_CA_COMPROMISE
  case CRL_REASON_AFFILIATION_CHANGED
  case CRL_REASON_SUPERSEDED
  case CRL_REASON_CESSATION_OF_OPERATION
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct OperationDescription : Swift.Codable {
  public var type: Swift.String
  public var caption: Swift.String
  public var description: Swift.String?
  public init()
  public init(type: Swift.String, caption: Swift.String, description: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PolicyPayload : Swift.Codable {
  public var selfRegistrationEnabled: Swift.Bool
  public var externalLoginRequired: Swift.Bool
  public var keyActivationRequired: Swift.Bool
  public var keyProtectionFlags: SDKFramework.KeyProtectionFlags
  public var keyActivationTypes: [Swift.String]?
  public var clientSideSignatureEnabled: Swift.Bool?
  public var clientSignEnrollmentEnabled: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ApproveRequestMT : Swift.Codable {
  public var approvedOperation: Swift.String
  public var hmac: Swift.String
  public init()
  public init(approvedOperation: Swift.String, hmac: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ApproveRequestMO : Swift.Codable {
  public var approvedOperation: SDKFramework.ApprovedOperation
  public init()
  public init(approvedOperation: SDKFramework.ApprovedOperation)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKRutokenLoginVC : SDKFramework.SDKScrollVC {
  @objc deinit
}
public struct CryptoProviderInfo : Swift.Codable {
  public var containerName: Swift.String
  public var provType: Swift.Int
  public var provName: Swift.String?
  public var keyContainerType: SDKFramework.CryptoKeyContainerType
  public init(containerName: Swift.String, keyContainerType: SDKFramework.CryptoKeyContainerType = .default, provType: Swift.Int = 80, provName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKLoginVC : SDKFramework.SDKScrollVC {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKSetPasswordVC : SDKFramework.SDKScrollVC {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Docs_V2 {
  public static let shared: SDKFramework.Docs_V2
  @objc deinit
}
extension SDKFramework.Docs_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  open func uploadDocument(kid: Swift.String, document: SDKFramework.UploadFile) async throws -> SDKFramework.UploadDocInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadDocument(kid: Swift.String, docId: Swift.String) async throws -> SDKFramework.SDKNetReqResDownloadType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadDocuments(kid: Swift.String, docIds: [Swift.String]) async throws -> [SDKFramework.SDKNetReqResDownloadType]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadPdfRawDocument(kid: Swift.String, docId: Swift.String) async throws -> SDKFramework.SDKNetReqResDownloadType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadPdfPreviewDocument(kid: Swift.String, docId: Swift.String) async throws -> SDKFramework.SDKNetReqResDownloadType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveDocuments(kid: Swift.String, document: SDKFramework.Document) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func listSavedDocument(kid: Swift.String) async throws -> [SDKFramework.Document]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func cleanUpDocuments(kid: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func cleanUpDocument(kid: Swift.String, id: Swift.String) async throws
  #endif
}
public protocol LogHandler {
  func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  @available(*, deprecated, renamed: "log(level:message:metadata:source:file:function:line:)")
  func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt)
  subscript(metadataKey _: Swift.String) -> SDKFramework.Logger.Metadata.Value? { get set }
  var metadata: SDKFramework.Logger.Metadata { get set }
  var logLevel: SDKFramework.Logger.Level { get set }
}
extension SDKFramework.LogHandler {
  @available(*, deprecated, message: "You should implement this method instead of using the default implementation")
  public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  @available(*, deprecated, renamed: "log(level:message:metadata:source:file:function:line:)")
  public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt)
}
public typealias CLNumPadDotStyle = SDKFramework.SDKViewStyle
public enum OperationStatus : Swift.String {
  case Completed
  case InProgress
  case Waiting
  case Error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OperationResultInfo : Swift.Codable {
  public var refId: Swift.String?
  public var originalRefId: Swift.String
  public var status: Swift.String
  public var error: Swift.String?
  public var errorDescription: Swift.String?
  public init()
  public init(refId: Swift.String?, originalRefId: Swift.String, status: Swift.String, error: Swift.String, errorDescription: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public enum SDKEncryptError : Swift.String, Swift.Error {
  case functionFailed
  case invalidParameters
  case noMemory
  case moreDataNeeded
  case invalidBlobHeader
  case invalidPassword
  case functionNotImplemented
  case encryptSetKeyError
  case encryptSetVectorError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SDKFramework.SDKEncryptError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKEncryptError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SigningKeyStorage {
  public func getAll() -> [SDKFramework.SigningKeyInfo]
  public func getKey(containerName: Swift.String, keyContainerType: SDKFramework.CryptoKeyContainerType) -> SDKFramework.SigningKeyInfo?
  public func getKey(containerFullName: Swift.String) -> SDKFramework.SigningKeyInfo?
  public func getContainerFullName(containerName: Swift.String, keyContainerType: SDKFramework.CryptoKeyContainerType) -> Swift.String?
  public func getKey(kid: Swift.String, rid: Swift.String?, cid: Swift.String?) -> SDKFramework.SigningKeyInfo?
  public func isExist(kid: Swift.String, rid: Swift.String?, cid: Swift.String?) -> Swift.Bool
  @objc deinit
}
infix operator => : DefaultPrecedence
public func => <T>(left: T, f: (T) -> Swift.Void) -> T where T : AnyObject
public struct NamePolicy : Swift.Codable {
  public var isRequired: Swift.Bool
  public var order: Swift.Int
  public var oid: Swift.String, name: Swift.String
  public var value: Swift.String?
  public var stringIdentifier: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtensionsPolicy : Swift.Codable {
  public var oid: Swift.String
  public var value: Swift.String
  public var critical: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CAPolicy : Swift.Codable {
  public var cryptoProviderInfos: [Swift.String : [SDKFramework.CAPolicy.CryptoProviderInfo]]?
  public var showInUi: Swift.Bool
  public var extensionsPolicy: [SDKFramework.ExtensionsPolicy]?
  public var id: Swift.Int
  public var name: Swift.String
  public var active: Swift.Bool, allowUserMode: Swift.Bool, snChangesEnable: Swift.Bool
  public var namePolicy: [SDKFramework.NamePolicy]
  public var ekuTemplates: [Swift.String : [Swift.String]]
  public var caType: Swift.String, validationMode: Swift.String
  public struct CryptoProviderInfo : Swift.Codable {
    public var containerName: Swift.String?
    public var provType: Swift.Int
    public var provName: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public enum SDKNetError : Swift.Error {
  case cancel
  case notAuthorized
  case tokenExpired
  case mapping(text: Swift.String)
  case responseBodyIsNil
  case parsing
  case server
  case customServer(text: Swift.String)
  case customText(text: Swift.String)
  case customCode(code: Swift.Int)
  case connectionLost
  case badUrl
  case service(code: Swift.Int)
  case badResponse(text: Swift.String)
  case inner(text: Swift.String)
}
extension SDKFramework.SDKNetError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct OperationHistory : Swift.Codable {
  public var records: [SDKFramework.AuditRecord]?
  public var totalCount: Swift.Int
  public var bookmark: Swift.Int
  public var kid: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDKLabelStyle {
  public var textColor: SDKFramework.SDKControlColor
  public var font: UIKit.UIFont?
  public var fontSize: SDKFramework.SDKControlFloatValue
  @objc deinit
}
@frozen public enum MTSignConfirmStateEnum {
  case confirmed
  case declined
  public static func == (a: SDKFramework.MTSignConfirmStateEnum, b: SDKFramework.MTSignConfirmStateEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKFixedVC : SDKFramework.SDKBaseVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public enum SDKCornerRadius {
  case value(_: CoreFoundation.CGFloat)
  case percent(_: CoreFoundation.CGFloat)
}
@frozen public enum ConfirmationSendingMode : Swift.String {
  case online
  case offline
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class Sign {
  public init()
  public func signAuto(kid: Swift.String, operation: SDKFramework.Operation?, successCompletion: @escaping ((_ approveRequest: SDKFramework.ApproveRequestMT?, _ state: SDKFramework.MTSignConfirmStateEnum) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func signMT(kid: Swift.String, operation: SDKFramework.Operation?, enableMultiSelection: Swift.Bool, inmediateSendConfirm: Swift.Bool, silent: Swift.Bool = false, successCompletion: @escaping ((_ approveRequest: SDKFramework.ApproveRequestMT?, _ state: SDKFramework.MTSignConfirmStateEnum) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func signMO(kid: Swift.String, parameters: [Swift.String : Swift.String], enableMultiSelection: Swift.Bool, inmediateSendConfirm: Swift.Bool, uploadDocInfos: [SDKFramework.UploadDocInfo], silent: Swift.Bool = false, isClientSide: Swift.Bool, successCompletion: @escaping ((_ signatureResult: SDKFramework.SignatureResult?, _ approveRequestMOSign: SDKFramework.ApproveRequestMO?) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func deferredRequest(kid: Swift.String, approveRequest: SDKFramework.ApproveRequestMT, successCompletion: @escaping (() -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func deferredRequest(kid: Swift.String, approveRequest: SDKFramework.ApproveRequestMO, successCompletion: @escaping ((_ signatureResult: SDKFramework.SignatureResult) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKSetPinRutokenVC : SDKFramework.SDKSetPassRutokenVC {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKBaseVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var isAutoClose: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
public enum CryptoLibError : Swift.Error, Swift.Equatable {
  case failure
  case invalidParams
  case noMemory
  case moreDataNeeded
  case invalidBlobHeader
  case invalidPassword
  case invalidPin
  case deviceLockedout
  case funcNotImplemented
  case invalidLicense
  case additionalDataNotFound
  case internalError
  case keyAlreadyExist
  case internalOccurred
  case invalidASNTag
  case moreData
  case badData
  case removedCard
  case certificateNotFound
  case keysetAsRegisteredIsInvalid
  case unknown(hex: Swift.String)
  public static func error(byHexFrom code: Swift.Int) -> SDKFramework.CryptoLibError
  public static func error(by hexCode: Swift.String) -> SDKFramework.CryptoLibError
  public static func == (a: SDKFramework.CryptoLibError, b: SDKFramework.CryptoLibError) -> Swift.Bool
}
extension SDKFramework.CryptoLibError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum AutoSignStateEnum : Swift.String, Swift.Codable {
  case Disabled
  case Aware
  case Enabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AppSystemDescription : Swift.Codable {
  public var clientId: Swift.String
  public var title: Swift.String?
  public var description: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Operation : Swift.Codable {
  public var description: SDKFramework.OperationDescription
  public var createdAt: Swift.Int64?
  public var expiresAt: Swift.Int64?
  public var documentCount: Swift.Int
  public var transactionId: Swift.String
  public var parameters: [Swift.String : Swift.String]?
  public var documents: [SDKFramework.Document]?
  public var kid: Swift.String?
  public var isClientSide: Swift.Bool?
  public var isFullDocRequired: Swift.Bool?
  public var certificateId: Swift.String?
  public var autoSignState: SDKFramework.AutoSignStateEnum?
  public var appSystemInfo: SDKFramework.AppSystemDescription?
  public init()
  public init(description: SDKFramework.OperationDescription, createdAt: Swift.Int64, expiresAt: Swift.Int64, documentCount: Swift.Int, transactionId: Swift.String, parameters: [Swift.String : Swift.String], documents: [SDKFramework.Document], kid: Swift.String, isClientSide: Swift.Bool, isFullDocRequired: Swift.Bool, certificateId: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDKQRCameraPreviewStyle {
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: SDKFramework.SDKControlColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SDKViewStyle {
  public var backgroundColor: SDKFramework.SDKControlColor
  public var cornerRadius: SDKFramework.SDKCornerRadius?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: SDKFramework.SDKControlColor?
  public var alpha: SDKFramework.SDKControlFloatValue
  @objc deinit
}
extension CoreFoundation.CGSize {
  public func crop(aspect: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public func rotate() -> CoreFoundation.CGSize
}
extension CoreFoundation.CGRect {
  public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, w: CoreFoundation.CGFloat, h: CoreFoundation.CGFloat)
  public var x: CoreFoundation.CGFloat {
    get
    set(value)
  }
  public var y: CoreFoundation.CGFloat {
    get
    set(value)
  }
}
extension CoreFoundation.CGRect {
  public func crop(aspect: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
@objc public protocol MTSlideToOpenDelegate {
  @objc func mtSlideToOpenDelegateDidFinish(_ sender: SDKFramework.MTSlideToOpenView)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MTSlideToOpenView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let textLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let sliderTextLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let thumnailImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let sliderHolderView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let draggedView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let view: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: SDKFramework.MTSlideToOpenDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var animationVelocity: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var sliderViewTopDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var thumbnailViewTopDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var thumbnailViewStartingDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textLabelLeadingDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var showSliderText: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var animationChangedEnabledBlock: ((Swift.Bool) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var sliderCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sliderBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var slidingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var thumbnailColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelText: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func resetStateWithAnimation(_ animated: Swift.Bool)
  @objc deinit
}
public struct OperationsInfo : Swift.Codable {
  public var operations: [SDKFramework.Operation]?
  public var kid: Swift.String?
  public init()
  public init(operations: [SDKFramework.Operation])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UploadFile : Swift.Codable {
  public var documentInfo: Swift.String
  public var snippetTemplate: Swift.String?
  public var previewTemplate: Swift.String?
  public var url: Foundation.URL
  public init(documentInfo: Swift.String, snippetTemplate: Swift.String?, previewTemplate: Swift.String?, url: Foundation.URL)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DeviceInfo : Swift.Codable {
  public var uid: Swift.String
  public var kid: Swift.String
  public var userName: Swift.String?
  public var profile: Swift.String?
  public var nonceRequired: Swift.Bool?
  public var deviceName: Swift.String?
  public var notBefore: Swift.Int32
  public var notAfter: Swift.Int32
  public var state: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Devices : Swift.Codable {
  public var devices: [SDKFramework.DeviceInfo]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SDKServerMessagesLocale : Swift.String {
  case badRequest
  case invalidInput
  case invalidIdentifier
  case wrongOperation
  case invalidLogin
  case notUniqueLogin
  case invalidPhone
  case notUniquePhone
  case invalidEmail
  case notUniqueEmail
  case invalidDeviceFingerprint
  case notUniqueDeviceFingerprint
  case invalidDeviceParams
  case keyAlreadyConfirmed
  case invalidKeyId
  case keyNotFound
  case requestedUserNotFound
  case invalidCertificate
  case invalidCertificateStatus
  case certificateNotFound
  case existingDeviceFingerprint
  case contentRequired
  case userNotFound
  case userBlocked
  case invalidAuthenticationScheme
  case keyExpiredOrNotYetValid
  case invalidHmac
  case invalidLicense
  case invalidGrant
  case invalidKinit
  case invalidKeyState
  case internalError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Certificate : Swift.Codable {
  public var type: Swift.String
  public var cid: Swift.String?
  public var rid: Swift.String?
  public var content: Swift.String
  public var caId: Swift.Int
  public var dn: [Swift.String : Swift.String]
  public var issuer: [Swift.String : Swift.String]?
  public var notBefore: Swift.Int32
  public var notAfter: Swift.Int32
  public var state: Swift.String
  public var friendlyName: Swift.String?
  public var isDefault: Swift.Bool
  public var isClient: Swift.Bool
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKOperationContentVC : SDKFramework.SDKFixedVC {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func themeUpdated()
}
extension SDKFramework.SDKNavigationController {
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func popViewController(animated: Swift.Bool) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func popViewController(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKAnimationTextVC : SDKFramework.SDKFixedVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
open class SigningKey {
  public init()
  open func listKeys() -> [SDKFramework.SigningKeyInfo]
  open func deleteKeyPair(kid: Swift.String, providerInfo: SDKFramework.CryptoProviderInfo?, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
public struct DeclinedDocument : Swift.Codable {
  public var id: Swift.String
  public var documentHash: Swift.String
  public var snippetHash: Swift.String
  public var reason: Swift.String
  public init()
  public init(id: Swift.String, documentHash: Swift.String, snippetHash: Swift.String, reason: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public struct QrData : Swift.Codable {
  public var kid: Swift.String?
  public var uid: Swift.String?
  public var service_url: Swift.String?
  public var key_content: Swift.String?
  public var activation_required: Swift.Bool?
  public var weakness: Swift.Bool?
  internal var nonce: Swift.String?
  internal var seed: Swift.String?
  public var operation: SDKFramework.Operation?
  internal var keys: [Swift.String : Swift.String]?
  internal var values: [Swift.String : Swift.String?]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SDKFramework.Auth {
  public typealias QRHandler = ((_ type: Swift.String?, _ url: Swift.String?, _ error: Swift.Error?) -> Swift.Void)
}
@frozen public enum SDKPdfError : Swift.Error {
  case wrongPdfData
  case undefinedError
  case wrongParameter(text: Swift.String)
  case fileExists(url: Foundation.URL)
  case userCancel
}
extension SDKFramework.SDKPdfError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKPdfError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct SDKPublicColorStyle {
  public var error: UIKit.UIColor
  public var success: UIKit.UIColor
  public var brand: SDKFramework.SDKPublicColorStyle.Brand
  public var text: SDKFramework.SDKPublicColorStyle.Text
  public var element: SDKFramework.SDKPublicColorStyle.Element
  public init()
  public static func toDark()
  public static func to(style: SDKFramework.SDKPublicColorStyle)
}
extension SDKFramework.SDKPublicColorStyle {
  public struct Brand {
    public var normal: UIKit.UIColor
    public var state2: UIKit.UIColor
    public var state3: UIKit.UIColor
  }
  public struct Text {
    public var primary: UIKit.UIColor
    public var secondary: UIKit.UIColor
    public var inverted: UIKit.UIColor
  }
  public struct Element {
    public var primary: UIKit.UIColor
    public var secondary: UIKit.UIColor
    public var inverted: UIKit.UIColor
    public var blackout: UIKit.UIColor
    public var bg: UIKit.UIColor
    public var bg_cards: UIKit.UIColor
    public var bg01: UIKit.UIColor
  }
}
extension SDKFramework.SDKPublicColorStyle {
  public static func getLight() -> SDKFramework.SDKPublicColorStyle
  public static func getDark() -> SDKFramework.SDKPublicColorStyle
}
public struct UploadDocInfo : Swift.Codable {
  public var docId: Swift.String
  public init()
  public init(docId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public enum SDKCertError : Swift.String, Swift.Error {
  case notFoundSigningKeyInfo
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SDKFramework.SDKCertError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKCertError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
open class Auth {
  public init()
  open func add(qrCode: Swift.String, successCompletion: @escaping ((_ type: Swift.String, _ url: Swift.String?) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func add(base64QR: Swift.String, successCompletion: @escaping ((_ type: Swift.String, _ url: Swift.String?) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func scanQR(successCompletion: @escaping ((_ type: Swift.String, _ url: Swift.String?, _ qrData: SDKFramework.QrData?) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func _init(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, password: Swift.String? = nil, successCompletion: @escaping ((_ kid: Swift.String) -> Swift.Void), errorCompletion: @escaping ((_ type: Swift.Error) -> Swift.Void))
  public func kinit(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, activationCode: Swift.String? = nil, password: Swift.String? = nil, successCompletion: @escaping ((_ kid: Swift.String) -> Swift.Void), errorCompletion: @escaping ((_ type: Swift.Error) -> Swift.Void))
  open func addNewDevice(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, uid: Swift.String, password: Swift.String? = nil, successCompletion: @escaping ((_ kid: Swift.String) -> Swift.Void), errorCompletion: @escaping ((_ type: Swift.Error) -> Swift.Void))
  open func confirm(kid: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func verify(kid: Swift.String, silent: Swift.Bool = false, successCompletion: @escaping (() -> Swift.Void), errorCompletion: @escaping ((_ type: Swift.Error) -> Swift.Void))
  open func setPassAuth(kid: Swift.String, password: Swift.String? = nil, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func changePassAuth(kid: Swift.String, keyProtectionType: SDKFramework.ProtectionType, oldPassword: Swift.String? = nil, newPassword: Swift.String? = nil, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func renameAuth(kid: Swift.String, newName: Swift.String) throws
  open func removeAuth(kid: Swift.String, deletedKid: Swift.String, forceDelete: Swift.Bool, onlyLocal: Swift.Bool = false, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  public static func getAuthList() throws -> [SDKFramework.DSSUser]
  open func confirmNewDevice(kid: Swift.String, confirmedKid: Swift.String, silent: Swift.Bool = false, approve: Swift.Bool, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func checkStatus(kid: Swift.String, viewQR: Swift.Bool, successCompletion: @escaping ((_ status: Swift.String) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func currentProtectionType(kid: Swift.String) -> SDKFramework.ProtectionType?
  @objc deinit
}
@frozen public enum ProtectionType : Swift.String {
  case PASSWORD
  case NO_PROTECTION
  case BIOMETRIC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct KeyProtectionFlags : Swift.Codable {
  public var fingerprintRequired: Swift.Bool
  public var collectEvents: Swift.Bool
  public var collectDeviceInfo: Swift.Bool
  public var collectSimInfo: Swift.Bool
  public var collectLocation: Swift.Bool
  public var passwordPolicy: Swift.Int
  public var denyOSProtection: Swift.Bool
  public var scoringEnabled: Swift.Bool
  public var strongKeyProtectionType: Swift.Bool
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDKSwitchStyle {
  public var tintColor: SDKFramework.SDKControlColor
  public var onTintColor: SDKFramework.SDKControlColor
  public var alpha: SDKFramework.SDKControlFloatValue
  @objc deinit
}
@frozen public enum SDKBiometricAuthError : Swift.Error {
  case invalidData
  case biometryLockout
  case biometryNotAvailable
  case biometryNotEnrolled
  case authenticationFailed
  case appCancel
  case invalidContext
  case notInteractive
  case passcodeNotSet
  case systemCancel
  case userFallback
  case biometricPwdSaveError
  public static func == (a: SDKFramework.SDKBiometricAuthError, b: SDKFramework.SDKBiometricAuthError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SDKFramework.SDKBiometricAuthError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKBiometricAuthError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class Docs {
  public static let shared: SDKFramework.Docs
  public func uploadDocument(kid: Swift.String, document: SDKFramework.UploadFile, completionQueue: Dispatch.DispatchQueue? = nil, successCompletion: @escaping ((_ uploadData: SDKFramework.UploadDocInfo) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func downloadDocument(kid: Swift.String, docId: Swift.String, completionQueue: Dispatch.DispatchQueue? = nil, successCompletion: @escaping ((_ data: SDKFramework.SDKNetReqResDownloadType) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func saveDocuments(kid: Swift.String, document: SDKFramework.Document, completion: @escaping (_ result: Swift.Int, _ error: Swift.Error?) -> Swift.Void)
  public func listSavedDocument(kid: Swift.String, successCompletion: @escaping ((_ documents: [SDKFramework.Document]) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func cleanUpDocuments(kid: Swift.String, id: Swift.String?, completion: @escaping (_ result: Swift.Int, _ error: Swift.Error?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKDemoVC : SDKFramework.SDKScrollVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension SDKFramework.SDKDemoVC {
  @_Concurrency.MainActor(unsafe) public static func show()
}
public struct SignatureResult : Swift.Codable {
  public var results: [SDKFramework.OperationResultInfo]
  public init()
  public init(results: [SDKFramework.OperationResultInfo])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SDKControlStatus {
  case normal
  case success
  case warning
  case error
  public static func == (a: SDKFramework.SDKControlStatus, b: SDKFramework.SDKControlStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
public struct Logger {
  @usableFromInline
  internal var handler: SDKFramework.LogHandler
  public let label: Swift.String
}
extension SDKFramework.Logger {
  @inlinable public func log(level: SDKFramework.Logger.Level, _ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        if self.logLevel <= level {
            self.handler.log(level: level,
                             message: message(),
                             metadata: metadata(),
                             source: source() ?? Logger.currentModule(fileID: (file)),
                             file: file, function: function, line: line)
        }
    }
  @inlinable public func log(level: SDKFramework.Logger.Level, _ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: level, message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public subscript(metadataKey metadataKey: Swift.String) -> SDKFramework.Logger.Metadata.Value? {
    get {
            return self.handler[metadataKey: metadataKey]
        }
    set {
            self.handler[metadataKey: metadataKey] = newValue
        }
  }
  @inlinable public var logLevel: SDKFramework.Logger.Level {
    get {
            return self.handler.logLevel
        }
    set {
            self.handler.logLevel = newValue
        }
  }
}
extension SDKFramework.Logger {
  @inlinable public func trace(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .trace, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func trace(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.trace(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func debug(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .debug, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func debug(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.debug(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func info(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .info, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func info(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.info(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func notice(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .notice, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func notice(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.notice(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func warning(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .warning, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func warning(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.warning(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func error(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .error, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func error(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.error(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func critical(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .critical, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func critical(_ message: @autoclosure () -> SDKFramework.Logger.Message, metadata: @autoclosure () -> SDKFramework.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.critical(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
}
public enum LoggingSystem {
  public static func bootstrap(_ factory: @escaping (Swift.String) -> SDKFramework.LogHandler)
}
extension SDKFramework.Logger {
  public typealias Metadata = [Swift.String : SDKFramework.Logger.MetadataValue]
  public enum MetadataValue {
    case string(Swift.String)
    case stringConvertible(Swift.CustomStringConvertible)
    case dictionary(SDKFramework.Logger.Metadata)
    case array([SDKFramework.Logger.Metadata.Value])
  }
  public enum Level : Swift.String, Swift.Codable, Swift.CaseIterable {
    case trace
    case debug
    case info
    case notice
    case warning
    case error
    case critical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SDKFramework.Logger.Level]
    public typealias RawValue = Swift.String
    public static var allCases: [SDKFramework.Logger.Level] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public init(label: Swift.String)
  public init(label: Swift.String, factory: (Swift.String) -> SDKFramework.LogHandler)
}
extension SDKFramework.Logger.Level : Swift.Comparable {
  public static func < (lhs: SDKFramework.Logger.Level, rhs: SDKFramework.Logger.Level) -> Swift.Bool
}
extension SDKFramework.Logger.MetadataValue : Swift.Equatable {
  public static func == (lhs: SDKFramework.Logger.Metadata.Value, rhs: SDKFramework.Logger.Metadata.Value) -> Swift.Bool
}
extension SDKFramework.Logger {
  public struct Message : Swift.ExpressibleByStringLiteral, Swift.Equatable, Swift.CustomStringConvertible, Swift.ExpressibleByStringInterpolation {
    public typealias StringLiteralType = Swift.String
    public init(stringLiteral value: Swift.String)
    public var description: Swift.String {
      get
    }
    public static func == (a: SDKFramework.Logger.Message, b: SDKFramework.Logger.Message) -> Swift.Bool
    public typealias ExtendedGraphemeClusterLiteralType = SDKFramework.Logger.Message.StringLiteralType
    public typealias StringInterpolation = Swift.DefaultStringInterpolation
    public typealias UnicodeScalarLiteralType = SDKFramework.Logger.Message.StringLiteralType
  }
}
public struct MultiplexLogHandler : SDKFramework.LogHandler {
  public init(_ handlers: [SDKFramework.LogHandler])
  public var logLevel: SDKFramework.Logger.Level {
    get
    set
  }
  public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  public var metadata: SDKFramework.Logger.Metadata {
    get
    set
  }
  public subscript(metadataKey metadataKey: SDKFramework.Logger.Metadata.Key) -> SDKFramework.Logger.Metadata.Value? {
    get
    set
  }
}
public struct StreamLogHandler : SDKFramework.LogHandler {
  public static func standardOutput(label: Swift.String) -> SDKFramework.StreamLogHandler
  public static func standardError(label: Swift.String) -> SDKFramework.StreamLogHandler
  public var logLevel: SDKFramework.Logger.Level
  public var metadata: SDKFramework.Logger.Metadata {
    get
    set
  }
  public subscript(metadataKey metadataKey: Swift.String) -> SDKFramework.Logger.Metadata.Value? {
    get
    set
  }
  public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
}
public struct SwiftLogNoOpLogHandler : SDKFramework.LogHandler {
  public init()
  public init(_: Swift.String)
  @inlinable public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt) {}
  @inlinable public subscript(metadataKey _: Swift.String) -> SDKFramework.Logger.Metadata.Value? {
    get {
            return nil
        }
    set {}
  }
  @inlinable public var metadata: SDKFramework.Logger.Metadata {
    get {
            return [:]
        }
    set {}
  }
  @inlinable public var logLevel: SDKFramework.Logger.Level {
    get {
            return .critical
        }
    set {}
  }
}
extension SDKFramework.Logger {
  @inlinable internal static func currentModule(filePath: Swift.String = #file) -> Swift.String {
        let utf8All = filePath.utf8
        return filePath.utf8.lastIndex(of: UInt8(ascii: "/")).flatMap { lastSlash -> Substring? in
            utf8All[..<lastSlash].lastIndex(of: UInt8(ascii: "/")).map { secondLastSlash -> Substring in
                filePath[utf8All.index(after: secondLastSlash) ..< lastSlash]
            }
        }.map {
            String($0)
        } ?? "n/a"
    }
  @inlinable internal static func currentModule(fileID: Swift.String = #fileID) -> Swift.String {
        let utf8All = fileID.utf8
        if let slashIndex = utf8All.firstIndex(of: UInt8(ascii: "/")) {
            return String(fileID[..<slashIndex])
        } else {
            return "n/a"
        }
    }
}
extension SDKFramework.Logger.MetadataValue : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = SDKFramework.Logger.MetadataValue.StringLiteralType
  public typealias UnicodeScalarLiteralType = SDKFramework.Logger.MetadataValue.StringLiteralType
}
extension SDKFramework.Logger.MetadataValue : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.Logger.MetadataValue : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension SDKFramework.Logger.MetadataValue : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.String
  public typealias Value = SDKFramework.Logger.Metadata.Value
  public init(dictionaryLiteral elements: (Swift.String, SDKFramework.Logger.Metadata.Value)...)
}
extension SDKFramework.Logger.MetadataValue : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = SDKFramework.Logger.Metadata.Value
  public init(arrayLiteral elements: SDKFramework.Logger.Metadata.Value...)
}
public typealias SDKControlColor = SDKFramework.SDKControlValue<SDKFramework.SDKControlStateValue<UIKit.UIColor>>
public typealias SDKControlFloatValue = SDKFramework.SDKControlValue<SDKFramework.SDKControlStateValue<CoreFoundation.CGFloat>>
public struct SDKControlValue<T> {
  public var normal: T
  public var success: T?
  public var warning: T?
  public var error: T?
  public init(normal: T, success: T? = nil, warning: T? = nil, error: T? = nil)
}
public struct DownloadDocInfo : Swift.Codable {
  public var id: Swift.String
  public var documentInfo: Swift.String
  public var documentHash: Swift.String
  public var snippet: Swift.String
  public var snippetHash: Swift.String?
  public var fileSize: Swift.Int64
  public var pageCount: Swift.Int
  public var isPrintableViewAvailable: Swift.Bool?
  public var isSnippetViewAvailable: Swift.Bool?
  public var isRawViewAvailable: Swift.Bool?
  public init()
  public init(id: Swift.String, documentInfo: Swift.String, documentHash: Swift.String, snippet: Swift.String, snippetHash: Swift.String?, fileSize: Swift.Int64, pageCount: Swift.Int, isPrintableViewAvailable: Swift.Bool?, isSnippetViewAvailable: Swift.Bool?, isRawViewAvailable: Swift.Bool?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Policy {
  public static let shared: SDKFramework.Policy
  open func getOperations(kid: Swift.String, type: Swift.String?, opId: Swift.String?, successCompletion: @escaping ((_ operationsInfo: SDKFramework.OperationsInfo) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func getHistoryOperations(kid: Swift.String, count: Swift.Int? = nil, bookmark: Swift.Int64? = nil, operationCodes: [Swift.Int]? = nil, successCompletion: @escaping ((_ operationHistory: SDKFramework.OperationHistory) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func getParamsDSS(serviceUrl: Swift.String, successCompletion: @escaping ((_ policy: SDKFramework.PolicyPayload) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func getUserDevices(kid: Swift.String, successCompletion: @escaping ((_ devices: SDKFramework.Devices) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func getCaParams(kid: Swift.String, successCompletion: @escaping ((_ policy: SDKFramework.SignServerPolicy) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  public func updateDeviceInfo(kid: Swift.String, pushAddress: Swift.String, successCompletion: @escaping (() -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func generateKeyPair(provType: Swift.Int) throws
  open func addEntropy(seed: Swift.String) throws
  @objc deinit
}
public struct ConfirmedDocument : Swift.Codable {
  public var id: Swift.String
  public var documentHash: Swift.String
  public var snippetHash: Swift.String
  public var signedHash: Swift.String?
  public var signedDocId: Swift.String?
  public var decryptedDocId: Swift.String?
  public init()
  public init(id: Swift.String, documentHash: Swift.String, snippetHash: Swift.String, signedHash: Swift.String? = nil, signedDocId: Swift.String? = nil, decryptedDocId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SDKExternalKeyCertificateModel {
  public let keyInfo: SDKFramework.SigningKeyInfo
  public let cert: SDKFramework.Certificate
}
@_hasMissingDesignatedInitializers open class Cert {
  public static let shared: SDKFramework.Cert
  open func getCert(kid: Swift.String, caId: Swift.Int, tId: Swift.String, dn: [Swift.String : Swift.String], successCompletion: @escaping ((_ cert: SDKFramework.Certificate) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func setCert(kid: Swift.String, crt: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func getCertList(kid: Swift.String, successCompletion: @escaping ((_ certs: [SDKFramework.Certificate]) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func setNameCert(kid: Swift.String, cid: Swift.String, friendlyName: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func suspendCert(kid: Swift.String, cid: Swift.String, holdDate: Swift.Int64, unholdDate: Swift.Int64, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func resumeCert(kid: Swift.String, cid: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func revokeCert(kid: Swift.String, cid: Swift.String, reason: Swift.Int, date: Swift.Int32, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func setDefaultCert(kid: Swift.String, cid: Swift.String, _default: Swift.Bool, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func deleteCert(kid: Swift.String, cid: Swift.String? = nil, rid: Swift.String? = nil, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open func getClientCert(kid: Swift.String, caId: Swift.Int, tId: Swift.String, dn: [Swift.String : Swift.String], successCompletion: @escaping ((_ cert: SDKFramework.Certificate) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func signRequest(kid: Swift.String, cert: SDKFramework.Certificate, providerInfo: SDKFramework.CryptoProviderInfo?, pin: Swift.String, successCompletion: @escaping ((_ signedCertificate: Foundation.Data) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func sendClientSignedCertificate(kid: Swift.String, caId: Swift.Int, rid: Swift.String, content: Foundation.Data, successCompletion: @escaping ((_ cert: SDKFramework.Certificate) -> Swift.Void), errorCompletion: @escaping ((_ error: Swift.Error) -> Swift.Void))
  open func installCertificate(kid: Swift.String, cert: SDKFramework.Certificate, providerInfo: SDKFramework.CryptoProviderInfo?, pin: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  public func checkIfInstalled(kid: Swift.String, certificate: SDKFramework.Certificate) -> Swift.Bool
  public func checkIfAccessibleOnThisDevice(kid: Swift.String, cid: Swift.String?, rid: Swift.String?) -> Swift.Bool
  @objc deinit
}
@frozen public enum SDKAuthError : Swift.Error {
  case deniedOfUseSDKMethod
  case undefinedError
  case wrongQrString
  case invalidQrCode
  case nameIsEmpty
  case nameIsExist
  case selfRegistrationImpossible
  case biometricKeyProtectionImpossible
  case noPolicyKeyProtectionError
  case incorrectKeyStatus
  case kidNotFound
  case qrDoesNotMatchConfirmedKid
  case invalidPassword(text: Swift.String?)
  case operationExpired
  case bioRandomNumberSensor(code: Swift.UInt64)
}
extension SDKFramework.SDKAuthError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKAuthError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKRutokenDemoVC : SDKFramework.SDKScrollVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public struct SDKControlStateValue<T> {
  public var normal: T
  public var selected: T?
  public var highlighted: T?
  public var disabled: T?
  public init(normal: T, selected: T? = nil, highlighted: T? = nil, disabled: T? = nil)
}
@_hasMissingDesignatedInitializers public class Auth_V2 {
  public static let shared: SDKFramework.Auth_V2
  @objc deinit
}
extension SDKFramework.Auth_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  public func add(qrCode: Swift.String) async throws -> (type: Swift.String, url: Swift.String?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func add(base64QR: Swift.String) async throws -> (type: Swift.String, url: Swift.String?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func scanAndAddQR() async throws -> (type: Swift.String, url: Swift.String?, qrData: SDKFramework.QrData?)
  #endif
}
extension SDKFramework.Auth_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  public func normalInit(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, password: Swift.String? = nil) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func kInit(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, activationCode: Swift.String? = nil, password: Swift.String? = nil) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func addNewDevice(dssUser: SDKFramework.DSSUser, registerInfo: SDKFramework.RegisterInfo, keyProtectionType: SDKFramework.ProtectionType, uid: Swift.String, password: Swift.String? = nil) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func confirm(kid: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func verifyDevice(kid: Swift.String, silent: Swift.Bool = false) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setPassAuth(kid: Swift.String, password: Swift.String? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func changePassAuth(kid: Swift.String, keyProtectionType: SDKFramework.ProtectionType, oldPassword: Swift.String? = nil, newPassword: Swift.String? = nil) async throws
  #endif
  public func renameAuth(kid: Swift.String, newName: Swift.String) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func removeAuth(kid: Swift.String, deletedKid: Swift.String, forceDelete: Swift.Bool, onlyLocal: Swift.Bool) async throws
  #endif
  public func getAuthList() throws -> [SDKFramework.DSSUser]
  #if compiler(>=5.3) && $AsyncAwait
  public func confirmNewDevice(kid: Swift.String, confirmedKid: Swift.String, silent: Swift.Bool = false, approve: Swift.Bool) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func checkStatus(kid: Swift.String, viewQR: Swift.Bool) async throws -> Swift.String
  #endif
  public func currentProtectionType(kid: Swift.String) throws -> SDKFramework.ProtectionType
}
public struct AuditRecord : Swift.Codable {
  public var id: Swift.Int
  public var operationCode: Swift.Int
  public var text: Swift.String
  public var date: Swift.Int64
  public var parameters: [Swift.String : Swift.String]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AutoSignConfirmaionVC : SDKFramework.SDKFixedVC {
  @_Concurrency.MainActor(unsafe) public init(with kid: Swift.String, operation: SDKFramework.Operation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public struct RegisterInfo {
  public var pushAddress: Swift.String
  public var appVersion: Swift.String?
  public var userName: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var token: Swift.String?
  public var deviceName: Swift.String?
  public init()
  public init(pushAddress: Swift.String, appVersion: Swift.String?, userName: Swift.String?, phone: Swift.String?, email: Swift.String?, token: Swift.String?)
}
@frozen public enum SDKQRCodeError : Swift.Error {
  case wrongQrString
  case invalidQrCode
  case qrNotContainOperation
  case qrNotLoaded
  case qrDoesNotMatchConfirmedKid
  public static func == (a: SDKFramework.SDKQRCodeError, b: SDKFramework.SDKQRCodeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SDKFramework.SDKQRCodeError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKQRCodeError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKSetPassRutokenVC : SDKFramework.SDKScrollVC {
  @objc deinit
}
public struct Document : Swift.Codable {
  public var id: Swift.String
  public var documentInfo: Swift.String
  public var documentHash: Swift.String
  public var snippet: Swift.String
  public var snippetHash: Swift.String?
  public var fileSize: Swift.Int64
  public var pageCount: Swift.Int
  public var isPrintableViewAvailable: Swift.Bool?
  public var isSnippetViewAvailable: Swift.Bool?
  public var isRawViewAvailable: Swift.Bool?
  public var documentPreSignedHash: Swift.String?
  public var xmlEncryptedKey: Swift.String?
  public var documentPreDataId: Swift.String?
  public var agreeKeyPublicKey: Swift.String?
  public var agreeKeyUkm: Swift.String?
  public var agreeKeyVkoAlgId: Swift.String?
  public init()
  public init(id: Swift.String, documentInfo: Swift.String, documentHash: Swift.String, snippet: Swift.String, snippetHash: Swift.String?, fileSize: Swift.Int64, pageCount: Swift.Int, isPrintableViewAvailable: Swift.Bool?, isSnippetViewAvailable: Swift.Bool?, isRawViewAvailable: Swift.Bool?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDKCheckBoxStyle {
  public var cornerRadius: SDKFramework.SDKCheckBoxStateValue<SDKFramework.SDKCornerRadius>
  public var borderWidth: SDKFramework.SDKCheckBoxStateValue<CoreFoundation.CGFloat>?
  public var lineWidth: SDKFramework.SDKCheckBoxStateValue<CoreFoundation.CGFloat>
  public var checkmarkSize: SDKFramework.SDKCheckBoxStateValue<CoreFoundation.CGFloat>
  public var backgroundColor: SDKFramework.SDKCheckBoxStateValue<SDKFramework.SDKControlColor>
  public var borderColor: SDKFramework.SDKCheckBoxStateValue<SDKFramework.SDKControlColor>?
  public var tintColor: SDKFramework.SDKCheckBoxStateValue<SDKFramework.SDKControlColor>
  public var alpha: SDKFramework.SDKCheckBoxStateValue<SDKFramework.SDKControlFloatValue>?
  @objc deinit
}
@frozen public enum SDKCancelType : Swift.Error {
  case userCancel
  case error(_: Swift.Error)
}
extension SDKFramework.SDKCancelType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKCancelType : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@frozen public enum SDKNetReqResDownloadType {
  case data(value: Foundation.Data)
  case url(value: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKInitCardRutokenVC : SDKFramework.SDKSetPassRutokenVC {
  @objc deinit
}
public class SDKPublicStyle {
  public static let styleNotificationName: Foundation.Notification.Name
  public var QRCamera: SDKFramework.SDKPublicStyle.QRCameraPreview
  public var button: SDKFramework.SDKPublicStyle.Button
  public var label: SDKFramework.SDKPublicStyle.Label
  public var textField: SDKFramework.SDKPublicStyle.TextField
  public var pinPad: SDKFramework.SDKPublicStyle.PinPad
  public var `switch`: SDKFramework.SDKPublicStyle.Switch
  public var numPad: SDKFramework.SDKPublicStyle.NumPad
  public var modalWaitTintColor: UIKit.UIColor
  public init()
  public static func toLight()
  public static func toDark()
  public static func to(custom: SDKFramework.SDKPublicStyle)
  @objc deinit
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class QRCameraPreview {
    public var body: SDKFramework.SDKQRCameraPreviewStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class Button {
    public var primary: SDKFramework.SDKButtonStyle
    public var secondary: SDKFramework.SDKButtonStyle
    public var triety: SDKFramework.SDKButtonStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class TextField {
    public var textInput: SDKFramework.SDKTextFieldStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class Label {
    public var def: SDKFramework.SDKLabelStyle
    public var header: SDKFramework.SDKLabelStyle
    public var header3: SDKFramework.SDKLabelStyle
    public var main: SDKFramework.SDKLabelStyle
    public var main2: SDKFramework.SDKLabelStyle
    public var title: SDKFramework.SDKLabelStyle
    public var body: SDKFramework.SDKLabelStyle
    public var second: SDKFramework.SDKLabelStyle
    public var qrHeader3: SDKFramework.SDKLabelStyle
    public var qrBody: SDKFramework.SDKLabelStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class PinPad {
    public var number: SDKFramework.SDKButtonStyle
    public var delete: SDKFramework.SDKButtonStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class Switch {
    public var primary: SDKFramework.SDKSwitchStyle
    public var checkBox: SDKFramework.SDKCheckBoxStyle
    @objc deinit
  }
}
extension SDKFramework.SDKPublicStyle {
  @_hasMissingDesignatedInitializers public class NumPad {
    public var dot: SDKFramework.CLNumPadDotStyle
    @objc deinit
  }
}
public struct ApprovedOperation : Swift.Codable {
  public var id: Swift.String?
  public var type: Swift.String
  public var caption: Swift.String
  public var parameters: [Swift.String : Swift.String]?
  public var confirmedDocuments: [SDKFramework.ConfirmedDocument]?
  public var declinedDocuments: [SDKFramework.DeclinedDocument]?
  public var timeStamp: Swift.Int64?
  public init()
  public init(id: Swift.String, type: Swift.String, caption: Swift.String, parameters: [Swift.String : Swift.String], confirmedDocuments: [SDKFramework.ConfirmedDocument], declinedDocuments: [SDKFramework.DeclinedDocument], timeStamp: Swift.Int64)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HTMLColors {
  public static let hexColors: [Swift.String : Swift.String]
}
@_hasMissingDesignatedInitializers public class SDKNavigation {
  public static let shared: SDKFramework.SDKNavigation
  weak public var delegate: SDKFramework.SDKNavigationDelegate?
  public var modalLoadingForSilentRequestType: SDKFramework.SDKNavigation.ModalLoadingForSilentRequestType {
    get
    set
  }
  @objc deinit
}
extension SDKFramework.SDKNavigation {
  public func push(vc: UIKit.UIViewController, animated: Swift.Bool = true)
  public func pop(animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func present(vc: UIKit.UIViewController, animated: Swift.Bool = true, modalPresentationStyle: UIKit.UIModalPresentationStyle = .fullScreen, completion: (() -> Swift.Void)? = nil)
  public func dismissPresented(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
public protocol SDKNavigationDelegate : AnyObject {
  func needShow(navigationController: SDKFramework.SDKNavigationController, animated: Swift.Bool, completion: @escaping (() -> Swift.Void))
  func needHide(navigationController: SDKFramework.SDKNavigationController, animated: Swift.Bool, completion: @escaping (() -> Swift.Void))
  func needShowLoading()
  func needHideLoading()
}
extension SDKFramework.SDKNavigation {
  public enum ModalLoadingForSilentRequestType {
    case inner
    case outer
    public static func == (a: SDKFramework.SDKNavigation.ModalLoadingForSilentRequestType, b: SDKFramework.SDKNavigation.ModalLoadingForSilentRequestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum SDKContentType : Swift.String {
  case json
  case jpeg
  case html
  case octetStream
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class Policy_V2 {
  public static let shared: SDKFramework.Policy_V2
  @objc deinit
}
extension SDKFramework.Policy_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  public func getOperations(kid: Swift.String, type: Swift.String?, opId: Swift.String?, clientId: Swift.String? = nil) async throws -> SDKFramework.OperationsInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getHistoryOperations(kid: Swift.String, count: Swift.Int? = nil, bookmark: Swift.Int64? = nil, operationCodes: [Swift.Int]? = nil) async throws -> SDKFramework.OperationHistory
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getParamsDSS(serviceUrl: Swift.String) async throws -> SDKFramework.PolicyPayload
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getUserDevices(kid: Swift.String) async throws -> SDKFramework.Devices
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getCaParams(kid: Swift.String) async throws -> SDKFramework.SignServerPolicy
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func updateDeviceInfo(kid: Swift.String, pushAddress: Swift.String) async throws
  #endif
}
extension SDKFramework.Policy_V2 {
  public func generateKeyPair(provType: Swift.Int) throws
  public func addEntropy(seed: Swift.String) throws
}
@frozen public enum SDKCertLocationType : Swift.String, Swift.CaseIterable {
  case deviceLocal
  case server
  case tokenLocal
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SDKFramework.SDKCertLocationType]
  public typealias RawValue = Swift.String
  public static var allCases: [SDKFramework.SDKCertLocationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SDKFramework.SDKCertLocationType {
  public func getTitle() -> Swift.String
}
public struct SDKCheckBoxStateValue<T> {
  public var checked: T
  public var unchecked: T
  public init(checked: T, unchecked: T)
  public init(all: T)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SDKButtonStyle : SDKFramework.SDKControlStyle {
  public var title: SDKFramework.SDKLabelStyle
  @objc deinit
}
public struct SignServerPolicy : Swift.Codable {
  public var caPolicies: [SDKFramework.CAPolicy]
  public var processingTemplates: [SDKFramework.ProcessingTemplateInfo]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SDKRequestMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class CryptoProDss {
  public init()
  public func _init(completion: @escaping (_ result: SDKFramework.CSPInitCode) -> Swift.Void)
  @objc deinit
}
public struct SigningKeyInfo : Swift.Codable {
  public var kid: Swift.String
  public var uid: Swift.String
  public var containerName: Swift.String
  public var providerName: Swift.String?
  public var providerType: Swift.Int
  public var cid: Swift.String?
  public var rid: Swift.String?
  public var isInstalled: Swift.Bool
  public var createdAt: Foundation.Date
  public var installedAt: Foundation.Date?
  public var providerKeyType: SDKFramework.CryptoKeyContainerType
  public var savedPin: Swift.String?
  public var isExportable: Swift.Bool?
  public var containerFullName: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public init(kid: Swift.String, uid: Swift.String = "", containerName: Swift.String, containerFullName: Swift.String, providerName: Swift.String?, providerType: Swift.Int, providerKeyType: SDKFramework.CryptoKeyContainerType, cid: Swift.String?, rid: Swift.String?, isInstalled: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
}
@frozen public enum CSPInitCode : Swift.String {
  case init_ok
  case init_certs_not_installed
  case init_lockScreen_not_installed
  case init_device_rooted
  case init_kaspersky_not_installed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Sign_V2 {
  public static let shared: SDKFramework.Sign_V2
  @objc deinit
}
extension SDKFramework.Sign_V2 {
  #if compiler(>=5.3) && $AsyncAwait
  public func signAuto(kid: Swift.String, operation: SDKFramework.Operation?) async throws -> (approveRequest: SDKFramework.ApproveRequestMT?, state: SDKFramework.MTSignConfirmStateEnum)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signMT(kid: Swift.String, operation: SDKFramework.Operation?, enableMultiSelection: Swift.Bool, confirmationSendingMode: SDKFramework.ConfirmationSendingMode, silent: Swift.Bool = false) async throws -> (approveRequest: SDKFramework.ApproveRequestMT?, state: SDKFramework.MTSignConfirmStateEnum)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signMO(kid: Swift.String, parameters: [Swift.String : Swift.String], enableMultiSelection: Swift.Bool, inmediateSendConfirm: Swift.Bool, uploadDocInfos: [SDKFramework.UploadDocInfo], silent: Swift.Bool = false, isClientSide: Swift.Bool) async throws -> (signatureResult: SDKFramework.SignatureResult?, approveRequestMOSign: SDKFramework.ApproveRequestMO?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func deferredRequest(kid: Swift.String, approveRequest: SDKFramework.ApproveRequestMT) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func deferredRequest(kid: Swift.String, approveRequest: SDKFramework.ApproveRequestMO) async throws -> SDKFramework.SignatureResult
  #endif
}
@frozen public enum SDKError : Swift.Error {
  case deniedOfUseSDKMethod
  case undefinedError
  case wrongParameter(text: Swift.String)
  case fileExists(url: Foundation.URL)
  case userCancel
  case kidNotFound
  case OSStatus(code: Darwin.OSStatus)
  case wrongBase64String
  case base64EncodedFailed
  case autoSignNotSupported
  case autoSignNoAppSystem
}
extension SDKFramework.SDKError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SDKFramework.SDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ProcessingTemplateInfo : Swift.Codable {
  public var id: Swift.Int
  public var description: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SDKStreamLogHandler : SDKFramework.LogHandler {
  public static func standardOutput(label: Swift.String) -> SDKFramework.SDKStreamLogHandler
  public static func standardError(label: Swift.String) -> SDKFramework.SDKStreamLogHandler
  public var logLevel: SDKFramework.Logger.Level
  public var metadata: SDKFramework.Logger.Metadata {
    get
    set
  }
  public subscript(metadataKey metadataKey: Swift.String) -> SDKFramework.Logger.Metadata.Value? {
    get
    set
  }
  public func log(level: SDKFramework.Logger.Level, message: SDKFramework.Logger.Message, metadata: SDKFramework.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
}
extension SDKFramework.DSSUser : Swift.Encodable {}
extension SDKFramework.DSSUser : Swift.Decodable {}
extension SDKFramework.CryptoKeyContainerType : Swift.Equatable {}
extension SDKFramework.CryptoKeyContainerType : Swift.Hashable {}
extension SDKFramework.CryptoKeyContainerType : Swift.RawRepresentable {}
extension SDKFramework.CryptoKeyContainerType : Swift.Sendable {}
extension SDKFramework.SDKCertRevokeReason : Swift.Equatable {}
extension SDKFramework.SDKCertRevokeReason : Swift.Hashable {}
extension SDKFramework.SDKCertRevokeReason : Swift.RawRepresentable {}
extension SDKFramework.OperationStatus : Swift.Equatable {}
extension SDKFramework.OperationStatus : Swift.Hashable {}
extension SDKFramework.OperationStatus : Swift.RawRepresentable {}
extension SDKFramework.SDKEncryptError : Swift.Equatable {}
extension SDKFramework.SDKEncryptError : Swift.Hashable {}
extension SDKFramework.SDKEncryptError : Swift.RawRepresentable {}
extension SDKFramework.MTSignConfirmStateEnum : Swift.Equatable {}
extension SDKFramework.MTSignConfirmStateEnum : Swift.Hashable {}
extension SDKFramework.MTSignConfirmStateEnum : Swift.Sendable {}
extension SDKFramework.ConfirmationSendingMode : Swift.Equatable {}
extension SDKFramework.ConfirmationSendingMode : Swift.Hashable {}
extension SDKFramework.ConfirmationSendingMode : Swift.RawRepresentable {}
extension SDKFramework.ConfirmationSendingMode : Swift.Sendable {}
extension SDKFramework.AutoSignStateEnum : Swift.Equatable {}
extension SDKFramework.AutoSignStateEnum : Swift.Hashable {}
extension SDKFramework.AutoSignStateEnum : Swift.RawRepresentable {}
extension SDKFramework.SDKServerMessagesLocale : Swift.Equatable {}
extension SDKFramework.SDKServerMessagesLocale : Swift.Hashable {}
extension SDKFramework.SDKServerMessagesLocale : Swift.RawRepresentable {}
extension SDKFramework.SDKCertError : Swift.Equatable {}
extension SDKFramework.SDKCertError : Swift.Hashable {}
extension SDKFramework.SDKCertError : Swift.RawRepresentable {}
extension SDKFramework.ProtectionType : Swift.Equatable {}
extension SDKFramework.ProtectionType : Swift.Hashable {}
extension SDKFramework.ProtectionType : Swift.RawRepresentable {}
extension SDKFramework.ProtectionType : Swift.Sendable {}
extension SDKFramework.SDKBiometricAuthError : Swift.Equatable {}
extension SDKFramework.SDKBiometricAuthError : Swift.Hashable {}
extension SDKFramework.SDKControlStatus : Swift.Equatable {}
extension SDKFramework.SDKControlStatus : Swift.Hashable {}
extension SDKFramework.Logger.Level : Swift.Hashable {}
extension SDKFramework.Logger.Level : Swift.RawRepresentable {}
extension SDKFramework.SDKQRCodeError : Swift.Equatable {}
extension SDKFramework.SDKQRCodeError : Swift.Hashable {}
extension SDKFramework.SDKNetReqResDownloadType : Swift.Sendable {}
extension SDKFramework.SDKNavigation.ModalLoadingForSilentRequestType : Swift.Equatable {}
extension SDKFramework.SDKNavigation.ModalLoadingForSilentRequestType : Swift.Hashable {}
extension SDKFramework.SDKContentType : Swift.Equatable {}
extension SDKFramework.SDKContentType : Swift.Hashable {}
extension SDKFramework.SDKContentType : Swift.RawRepresentable {}
extension SDKFramework.SDKCertLocationType : Swift.Equatable {}
extension SDKFramework.SDKCertLocationType : Swift.Hashable {}
extension SDKFramework.SDKCertLocationType : Swift.RawRepresentable {}
extension SDKFramework.SDKCertLocationType : Swift.Sendable {}
extension SDKFramework.SDKRequestMethod : Swift.Equatable {}
extension SDKFramework.SDKRequestMethod : Swift.Hashable {}
extension SDKFramework.SDKRequestMethod : Swift.RawRepresentable {}
extension SDKFramework.CSPInitCode : Swift.Equatable {}
extension SDKFramework.CSPInitCode : Swift.Hashable {}
extension SDKFramework.CSPInitCode : Swift.RawRepresentable {}
extension SDKFramework.CSPInitCode : Swift.Sendable {}
